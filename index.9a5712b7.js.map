{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,E,I,A,W,M,A,U,wI,G,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCEA,IAAM,EAAA,WAAA,EAAN,e,EAAM,SAAA,EACQ,CAAY,GADpB,A,S,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,EAAA,IAAA,CAAA,GAEF,IAAI,CAAC,YAAY,CAAG,GAAgB,CAClC,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAC,CAApC,EAA6C,OAAA,EAAG,E,GAChD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,M,CAVZ,O,EAAA,C,CAaJ,IAAA,WAAA,MAAA,WAGE,IAAK,I,E,I,CAFC,EAAgB,IAAI,CAAC,QAAQ,GAE1B,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,KAAvC,A,S,C,EAME,IAAK,IAJC,EAAW,AADL,EAAK,KAAK,CAAC,EAAE,CACJ,MAAM,CAAC,SAAC,CAA7B,EAAsC,OAAA,AAAS,IAAT,C,GAEhC,EAAS,EAAE,CAER,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IACnC,GAAI,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,CAAE,CACnC,IAAM,EAAc,AAAc,EAAd,CAAQ,CAAC,EAAE,CAE/B,EAAO,IAAI,CAAC,GACZ,EAAK,KAAK,EAAI,EACd,GACF,MACE,EAAO,IAAI,CAAC,CAAQ,CAAC,EAAE,EAM3B,IAlBA,IAgBM,EAAS,EAAG,GAEX,EAAM,MAAM,CAAG,GACpB,EAAM,IAAI,CAAC,EAGb,CAAA,EAAK,KAAK,CAAC,EAAE,CAAG,CAClB,EAzBA,GA2BI,IAAI,CAAC,eAAe,CAAC,KACvB,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,YAAA,MAAA,WAGE,IAAK,I,E,I,CAFC,EAAgB,IAAI,CAAC,QAAQ,GAE1B,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,KAAvC,A,S,C,EAME,IAAK,IAJC,EAAW,AADL,EAAK,KAAK,CAAC,EAAE,CACJ,MAAM,CAAC,SAAC,CAA7B,EAAsC,OAAA,AAAS,IAAT,C,GAEhC,EAAS,EAAE,CAER,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAAG,IACxC,GAAI,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,CAAE,CACnC,IAAM,EAAc,AAAc,EAAd,CAAQ,CAAC,EAAE,CAE/B,EAAO,IAAI,CAAC,GACZ,EAAK,KAAK,EAAI,EACd,GACF,MACE,EAAO,IAAI,CAAC,CAAQ,CAAC,EAAE,EAI3B,EAAO,OAAO,GAId,IAFA,IAAM,EAAS,EAAG,GAEX,EAAM,MAAM,CAAG,GACpB,EAAM,OAAO,CAAC,EAGhB,CAAA,EAAK,KAAK,CAAC,EAAE,CAAG,CAClB,EA3BA,GA6BI,IAAI,CAAC,eAAe,CAAC,KACvB,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,SAAA,MAAA,WAGE,IAAK,I,E,I,C,E,S,C,EAMH,IAAK,IAJC,EAAW,AADF,EAAK,KAAK,CAAC,GAAG,CAAC,SAAC,CAA/B,EAAuC,OAAA,CAAG,CAAC,EAAE,A,GACrB,MAAM,CAAC,SAAC,CAAhC,EAAyC,OAAA,AAAS,IAAT,C,GAEnC,EAAS,EAAE,CAER,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IACnC,GAAI,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,CAAE,CACnC,IAAM,EAAc,AAAc,EAAd,CAAQ,CAAC,EAAE,CAE/B,EAAO,IAAI,CAAC,GACZ,EAAK,KAAK,EAAI,EACd,GACF,MACE,EAAO,IAAI,CAAC,CAAQ,CAAC,EAAE,EAM3B,IAlBA,IAgBM,EAAS,EAAG,GAEX,EAAM,MAAM,CAAG,GACpB,EAAM,IAAI,CAAC,GAGb,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,EAAK,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,AAE/B,EA7BM,EAAgB,IAAI,CAAC,QAAQ,GAE1B,EAAI,EAAG,EAAI,EAAG,IAAvB,EAAA,GA6BI,IAAI,CAAC,eAAe,CAAC,KACvB,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,WAAA,MAAA,WAGE,IAAK,I,E,I,C,E,S,C,EAMH,IAAK,IAJC,EAAW,AADF,EAAK,KAAK,CAAC,GAAG,CAAC,SAAC,CAA/B,EAAuC,OAAA,CAAG,CAAC,EAAE,A,GACrB,MAAM,CAAC,SAAC,CAAhC,EAAyC,OAAA,AAAS,IAAT,C,GAEnC,EAAS,EAAE,CAER,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAAG,IACxC,GAAI,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,CAAE,CACnC,IAAM,EAAc,AAAc,EAAd,CAAQ,CAAC,EAAE,CAE/B,EAAO,IAAI,CAAC,GACZ,EAAK,KAAK,EAAI,EACd,GACF,MACE,EAAO,IAAI,CAAC,CAAQ,CAAC,EAAE,EAI3B,EAAO,OAAO,GAId,IAFA,IAAM,EAAS,EAAG,GAEX,EAAM,MAAM,CAAG,GACpB,EAAM,OAAO,CAAC,GAGhB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,EAAK,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAK,CAAC,EAAE,AAE/B,EA/BM,EAAgB,IAAI,CAAC,QAAQ,GAE1B,EAAI,EAAG,EAAI,EAAG,IAAvB,EAAA,GA+BI,IAAI,CAAC,eAAe,CAAC,KACvB,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,YAAY,GAErB,C,E,CAEA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAEA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAAvB,EAAgC,OAAA,EAAG,E,EACrC,C,E,CAEA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAEA,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,C,E,CAEA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAC,CAApC,EAA6C,OAAA,EAAG,E,GAChD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,C,E,CAEA,IAAA,gBAAA,MAAA,WAGE,IAAK,IAFC,EAAa,EAAE,CAEZ,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACf,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,I,EAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAC7C,E,A,S,C,E,G,M,O,C,G,O,C,E,EAAA,CAAU,CAAC,EAAY,G,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,EAAA,I,E,EAAA,I,A,W,M,A,U,6I,IAAnC,EAAY,CAAA,CAAA,EAAA,CAAP,EAAO,CAAnB,CAAA,EAAA,AAEA,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CACzB,CACF,C,E,CAEA,IAAA,WAAA,MAAA,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACxC,GAAI,AAAqB,OAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAClB,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,C,E,CAEA,IAAA,YAAA,MAAA,WACE,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACxC,GAAI,AAAqB,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAClB,MAAO,CAAA,EAKb,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAG,EAAG,IAC5C,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAC3C,MAAO,CAAA,EAKb,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAG,EAAG,IACzC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACxC,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAC3C,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,C,E,CAEA,IAAA,kBAAA,MAAA,SAAgB,CAAa,EAC3B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACxC,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAa,CAAC,EAAE,CAAC,EAAE,CAC1C,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,C,E,CAEA,IAAA,eAAA,MAAA,WACM,IAAI,CAAC,QAAQ,GACf,IAAI,CAAC,MAAM,CAAG,MACL,IAAI,CAAC,SAAS,GACvB,IAAI,CAAC,MAAM,CAAG,OAEd,IAAI,CAAC,MAAM,CAAG,SAElB,C,E,C,A,S,C,C,C,E,I,I,E,E,E,E,M,C,I,C,I,E,C,C,E,A,C,E,U,C,E,U,E,C,E,E,Y,C,C,E,U,G,C,E,Q,C,C,C,E,O,c,C,E,E,G,C,E,C,E,AA5QI,E,S,C,GAAA,C,GA+QN,CAAA,OAAO,IAAI,CAAG,EAEQ,aAAlB,OAAO,QAA0B,OAAO,OAAO,EACjD,CAAA,OAAO,OAAO,CAAG,CADnB","sources":["<anon>","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        _class_call_check(this, Game);\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = this.initialState.map(function(row) {\n            return _to_consumable_array(row);\n        });\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    _create_class(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.state[i];\n                    var filtered = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var merged = [];\n                    for(var j = 0; j < filtered.length; j++)if (filtered[j] === filtered[j + 1]) {\n                        var mergedValue = filtered[j] * 2;\n                        merged.push(mergedValue);\n                        _this.score += mergedValue;\n                        j++;\n                    } else merged.push(filtered[j]);\n                    var final = _to_consumable_array(merged);\n                    while(final.length < 4)final.push(0);\n                    _this.state[i] = final;\n                };\n                var previousState = this.getState();\n                for(var i = 0; i < this.state.length; i++)_loop(i);\n                if (this.hasStateChanged(previousState)) {\n                    this.addRandomCell();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var row = _this.state[i];\n                    var filtered = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var merged = [];\n                    for(var j = filtered.length - 1; j >= 0; j--)if (filtered[j] === filtered[j - 1]) {\n                        var mergedValue = filtered[j] * 2;\n                        merged.push(mergedValue);\n                        _this.score += mergedValue;\n                        j--;\n                    } else merged.push(filtered[j]);\n                    merged.reverse();\n                    var final = _to_consumable_array(merged);\n                    while(final.length < 4)final.unshift(0);\n                    _this.state[i] = final;\n                };\n                var previousState = this.getState();\n                for(var i = 0; i < this.state.length; i++)_loop(i);\n                if (this.hasStateChanged(previousState)) {\n                    this.addRandomCell();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(j) {\n                    var column = _this.state.map(function(row) {\n                        return row[j];\n                    });\n                    var filtered = column.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var merged = [];\n                    for(var k = 0; k < filtered.length; k++)if (filtered[k] === filtered[k + 1]) {\n                        var mergedValue = filtered[k] * 2;\n                        merged.push(mergedValue);\n                        _this.score += mergedValue;\n                        k++;\n                    } else merged.push(filtered[k]);\n                    var final = _to_consumable_array(merged);\n                    while(final.length < 4)final.push(0);\n                    for(var i = 0; i < 4; i++)_this.state[i][j] = final[i];\n                };\n                var previousState = this.getState();\n                for(var j = 0; j < 4; j++)_loop(j);\n                if (this.hasStateChanged(previousState)) {\n                    this.addRandomCell();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(j) {\n                    var column = _this.state.map(function(row) {\n                        return row[j];\n                    });\n                    var filtered = column.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    var merged = [];\n                    for(var k = filtered.length - 1; k >= 0; k--)if (filtered[k] === filtered[k - 1]) {\n                        var mergedValue = filtered[k] * 2;\n                        merged.push(mergedValue);\n                        _this.score += mergedValue;\n                        k--;\n                    } else merged.push(filtered[k]);\n                    merged.reverse();\n                    var final = _to_consumable_array(merged);\n                    while(final.length < 4)final.unshift(0);\n                    for(var i = 0; i < 4; i++)_this.state[i][j] = final[i];\n                };\n                var previousState = this.getState();\n                for(var j = 0; j < 4; j++)_loop(j);\n                if (this.hasStateChanged(previousState)) {\n                    this.addRandomCell();\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state.map(function(row) {\n                    return _to_consumable_array(row);\n                });\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomCell();\n                this.addRandomCell();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.state = this.initialState.map(function(row) {\n                    return _to_consumable_array(row);\n                });\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        },\n        {\n            key: \"addRandomCell\",\n            value: function addRandomCell() {\n                var emptyCells = [];\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = _sliced_to_array(emptyCells[randomIndex], 2), row = _emptyCells_randomIndex[0], col = _emptyCells_randomIndex[1];\n                    this.state[row][col] = 2;\n                }\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                for(var i = 0; i < this.state.length; i++)for(var j = 0; j < this.state[i].length; j++){\n                    if (this.state[i][j] === 2048) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                for(var i = 0; i < this.state.length; i++)for(var j = 0; j < this.state[i].length; j++){\n                    if (this.state[i][j] === 0) return false;\n                }\n                for(var i1 = 0; i1 < this.state.length; i1++)for(var j1 = 0; j1 < this.state[i1].length - 1; j1++){\n                    if (this.state[i1][j1] === this.state[i1][j1 + 1]) return false;\n                }\n                for(var i2 = 0; i2 < this.state.length - 1; i2++)for(var j2 = 0; j2 < this.state[i2].length; j2++){\n                    if (this.state[i2][j2] === this.state[i2 + 1][j2]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"hasStateChanged\",\n            value: function hasStateChanged(previousState) {\n                for(var i = 0; i < this.state.length; i++)for(var j = 0; j < this.state[i].length; j++){\n                    if (this.state[i][j] !== previousState[i][j]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"updateStatus\",\n            value: function updateStatus() {\n                if (this.checkWin()) this.status = \"win\";\n                else if (this.checkLose()) this.status = \"lose\";\n                else this.status = \"playing\";\n            }\n        }\n    ]);\n    return Game;\n}();\nwindow.Game = Game;\nif (typeof module !== \"undefined\" && module.exports) module.exports = Game;\n\n//# sourceMappingURL=index.9a5712b7.js.map\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    const previousState = this.getState();\n\n    for (let i = 0; i < this.state.length; i++) {\n      const row = this.state[i];\n      const filtered = row.filter((cell) => cell !== 0);\n\n      const merged = [];\n\n      for (let j = 0; j < filtered.length; j++) {\n        if (filtered[j] === filtered[j + 1]) {\n          const mergedValue = filtered[j] * 2;\n\n          merged.push(mergedValue);\n          this.score += mergedValue;\n          j++;\n        } else {\n          merged.push(filtered[j]);\n        }\n      }\n\n      const final = [...merged];\n\n      while (final.length < 4) {\n        final.push(0);\n      }\n\n      this.state[i] = final;\n    }\n\n    if (this.hasStateChanged(previousState)) {\n      this.addRandomCell();\n      this.updateStatus();\n    }\n  }\n\n  moveRight() {\n    const previousState = this.getState();\n\n    for (let i = 0; i < this.state.length; i++) {\n      const row = this.state[i];\n      const filtered = row.filter((cell) => cell !== 0);\n\n      const merged = [];\n\n      for (let j = filtered.length - 1; j >= 0; j--) {\n        if (filtered[j] === filtered[j - 1]) {\n          const mergedValue = filtered[j] * 2;\n\n          merged.push(mergedValue);\n          this.score += mergedValue;\n          j--;\n        } else {\n          merged.push(filtered[j]);\n        }\n      }\n\n      merged.reverse();\n\n      const final = [...merged];\n\n      while (final.length < 4) {\n        final.unshift(0);\n      }\n\n      this.state[i] = final;\n    }\n\n    if (this.hasStateChanged(previousState)) {\n      this.addRandomCell();\n      this.updateStatus();\n    }\n  }\n\n  moveUp() {\n    const previousState = this.getState();\n\n    for (let j = 0; j < 4; j++) {\n      const column = this.state.map((row) => row[j]);\n      const filtered = column.filter((cell) => cell !== 0);\n\n      const merged = [];\n\n      for (let k = 0; k < filtered.length; k++) {\n        if (filtered[k] === filtered[k + 1]) {\n          const mergedValue = filtered[k] * 2;\n\n          merged.push(mergedValue);\n          this.score += mergedValue;\n          k++;\n        } else {\n          merged.push(filtered[k]);\n        }\n      }\n\n      const final = [...merged];\n\n      while (final.length < 4) {\n        final.push(0);\n      }\n\n      for (let i = 0; i < 4; i++) {\n        this.state[i][j] = final[i];\n      }\n    }\n\n    if (this.hasStateChanged(previousState)) {\n      this.addRandomCell();\n      this.updateStatus();\n    }\n  }\n\n  moveDown() {\n    const previousState = this.getState();\n\n    for (let j = 0; j < 4; j++) {\n      const column = this.state.map((row) => row[j]);\n      const filtered = column.filter((cell) => cell !== 0);\n\n      const merged = [];\n\n      for (let k = filtered.length - 1; k >= 0; k--) {\n        if (filtered[k] === filtered[k - 1]) {\n          const mergedValue = filtered[k] * 2;\n\n          merged.push(mergedValue);\n          this.score += mergedValue;\n          k--;\n        } else {\n          merged.push(filtered[k]);\n        }\n      }\n\n      merged.reverse();\n\n      const final = [...merged];\n\n      while (final.length < 4) {\n        final.unshift(0);\n      }\n\n      for (let i = 0; i < 4; i++) {\n        this.state[i][j] = final[i];\n      }\n    }\n\n    if (this.hasStateChanged(previousState)) {\n      this.addRandomCell();\n      this.updateStatus();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomCell();\n    this.addRandomCell();\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const [row, col] = emptyCells[randomIndex];\n\n      this.state[row][col] = 2;\n    }\n  }\n\n  checkWin() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length - 1; j++) {\n        if (this.state[i][j] === this.state[i][j + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length - 1; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === this.state[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  hasStateChanged(previousState) {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] !== previousState[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateStatus() {\n    if (this.checkWin()) {\n      this.status = 'win';\n    } else if (this.checkLose()) {\n      this.status = 'lose';\n    } else {\n      this.status = 'playing';\n    }\n  }\n}\n\nwindow.Game = Game;\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = Game;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","_non_iterable_spread","TypeError","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","Game","protoProps","initialState","_class_call_check","instance","Constructor","state","map","row","score","status","key","value","_this","previousState","getState","_loop","filtered","filter","cell","merged","j","mergedValue","push","final","hasStateChanged","addRandomCell","updateStatus","reverse","unshift","column","k","emptyCells","randomIndex","Math","floor","random","_emptyCells_randomIndex","_array_with_holes","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","next","done","err","_non_iterable_rest","col","i1","j1","i2","j2","checkWin","checkLose","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","window","module","exports"],"version":3,"file":"index.9a5712b7.js.map"}